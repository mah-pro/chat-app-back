// Importation du module jwt-then pour la gestion des JSON Web Tokens (JWT)
const jwt = require("jwt-then");

// Exportation d'une fonction middleware asynchrone qui vÃ©rifie la prÃ©sence et la validitÃ© du token JWT dans les en-tÃªtes de la requÃªte
module.exports = async (req, res, next) => {
    try {
        // VÃ©rification de la prÃ©sence de l'en-tÃªte "Authorization" dans la requÃªte
        if (!req.headers.authorization) throw "Forbidden!!";

        // Extraction du token Ã  partir de l'en-tÃªte "Authorization" en supposant qu'il soit au format "Bearer <token>"
        const token = req.headers.authorization.split(" ")[1];

        // VÃ©rification et dÃ©codage du token Ã  l'aide de la clÃ© secrÃ¨te dÃ©finie dans la variable d'environnement process.env.SECRET
        const payload = await jwt.verify(token, process.env.SECRET);

        // Ajout du contenu dÃ©codÃ© du token (payload) Ã  l'objet "req" pour qu'il soit accessible dans les fonctions middleware suivantes
        req.payload = payload;

        // Appel Ã  la fonction middleware suivante dans la chaÃ®ne de traitement
        next();
    } catch (err) {
        // Gestion des erreurs : En cas d'erreur (par exemple, token non valide), renvoie une rÃ©ponse avec un statut 401 (Non autorisÃ©) et un message indiquant l'interdiction
        res.status(401).json({
            message: "Forbidden ğŸš«ğŸš«ğŸš«",
        });
    }
};
